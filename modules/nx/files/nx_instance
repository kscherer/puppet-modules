#!/bin/bash
#
# nx_instance  Manage nx instances as if they are services
#
# chkconfig: 345 95 5
# description: Nx is a simple shell script used to do coverage testing
#              of Wind River Linux

# Source function library.
if [ ! -f /etc/debian_version ]; then
    . /etc/init.d/functions
fi
. /lib/lsb/init-functions

scriptname=$(basename $0)
#This script expects to be called through links of the format:
#nx_instance.1 for the first instance. Otherwise default is to 1
instance=1
if [ "x$scriptname" != "xnx_instance" ]; then
    instance=${scriptname##*.}
fi
nx_instance="nx_instance.$instance"

if [ -f /etc/sysconfig/nx_instance ]; then
    . /etc/sysconfig/nx_instance
fi

if [ -f /etc/default/nx_instance ]; then
    . /etc/default/nx_instance
fi

if [ -z "$nx_user" ]; then
    # Assume the user to run nx is nxadm
    nx_user="nxadm"
fi

nx_userhome="/home/${nx_user}/"
hostname=$(hostname -s)

if [ -z "$nx_builddir" ]; then
    nx_builddir="${nx_userhome}/nx/${hostname}.${instance}"
fi

#nx has its own pid file
pidfile="${nx_builddir}/.nx.lock"

if ! [ -d ${nx_builddir} ]; then
    echo 1>&2 "nx build dir ${nx_builddir} has not been created"
    failure "nx build dir not found"
    echo 1>&2
    exit 1
fi

# Check that nx has been installed
nx=${nx_builddir}/notxylo/nx
if ! [ -f $nx ]; then
    echo 1>&2 "nx not found. Expected it located here: $nx"
    failure "nx not found"
    echo 1>&2
    exit 1
fi

nxopts="--rcfile ${nx_builddir}/nxrc_files/$hostname.${instance} autorestart >> ${nx_builddir}/nx.log 2>&1 &"

#just to be safe make sure nxrc_files has latest configs
nx_command="cd ${nx_builddir};\
pushd nxrc_files > /dev/null 2>&1;\
if [ -d .git ]; then git pull > /dev/null 2>&1; fi;\
popd > /dev/null 2>&1;\
ulimit -u 5000;\
${nx_builddir}/notxylo/nx ${nxopts}"

RETVAL=0
nx_status_string=""

start() {
    echo -n "Starting nx instance ${instance}"

    #cannot start nx if this file is present
    if [ -f /var/tmp/ESAD ]; then
        echo -n "Removing ESAD"
        rm -f /var/tmp/ESAD
    fi

    #first check that current status of the nx instance
    nx_status

    if [ "$RETVAL" -eq "0" ]; then
        echo "Nx already running. Start request ignored."
        return 0;
    elif [ "$RETVAL" -eq "1" ]; then
        echo "Nx is hung, restarting..."
        stop
    elif [ "$RETVAL" -eq "150" ]; then
        echo "Warning: SFTU deployed. Start request ignored."
        return 0
    elif [ "$RETVAL" -eq "151" ]; then
        echo "Warning: Nx is experiencing external glitches. Start request ignored ."
        return 0
    elif [ "$RETVAL" -eq "4" ]; then
        echo "Nx is in unknown state, restarting..."
        stop
    fi

    #This will start each nx instance in its own process group
    if [ -f /etc/debian_version ]; then
        /sbin/start-stop-daemon --start --pidfile ${pidfile} --chuid ${nx_user} \
            --exec /bin/bash -- -l -c "${nx_command}"
    else
        daemon --pidfile ${pidfile} --user ${nx_user} ${nx_command}
    fi
    RETVAL=$?
    echo
    return $RETVAL
}

stop() {
    echo -n "Shutting down nx instance ${instance} ..."
    local pid=$(cat $pidfile)

    #check if pid in pidfile is valid
    if [ -d /proc/$pid ]; then
        local pgid=$(ps -p $pid -o pgid=)
        #echo "Send TERM signal to instance ${instance} with pid $pid and pgid $pgid"

        #first try gentle kill using kill program, not builtin kill which does not
        #support process group kill
        /bin/kill -- -${pgid## }

        #wait and check if process is actually dead
        sleep 5
        if ps -U ${nx_user} -o pgid= | grep -q $pgid
        then
            #echo "TERM failed. Killing instance ${instance} with pid $pid and pgid $pgid"
            /bin/kill -s 9 -- -${pgid}
        fi
    else
        echo -n "pid $pid already dead"
    fi
    success
    echo
    return 0
}

restart() {
    stop
    start
}

nx_status(){
    #Monitoring nx is a little tricky. Here are the possible states:
    #Stopped, Building, Hung, Waiting for commits or to retry git pulls
    #SFTU deployed
    #The return codes are from LSB:
    #http://refspecs.linuxbase.org/LSB_3.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html

    #support this function being called from outside this script
    local nx_builddir=$nx_builddir
    if [ -n "$1" ]; then
        nx_builddir=$1
    fi

    #assume no pidfile means that nx is stopped
    local pidfile="${nx_builddir}/.nx.lock"
    if [ ! -f $pidfile ]; then
        nx_status_string="No pidfile found. Assuming nx instance $instance is stopped"
        RETVAL=3
        return $RETVAL
    fi

    #assume no log file means nx is stopped
    local nx_log="${nx_builddir}/nx.log"
    if [ ! -f $nx_log ]; then
        nx_status_string="No nx log file found. Assuming nx instance $instance is stopped"
        RETVAL=3
        return $RETVAL
    fi

    local pid=$(cat $pidfile)
    local fifteen_min=900 #15 * 60 seconds
    local thirty_min=1800 #30 * 60 seconds
    #When nx is building is makes a link to the current build
    local wrbuildlog="${nx_builddir}/current_build/00-wrbuild.log"
    local now=$(date +%s)

    #check if pid in pidfile is valid
    if [ -d /proc/$pid ]; then
        local nxlog_age=$(($now - $(stat -c '%Y' "$nx_log")))
        if [ -f $wrbuildlog ]; then
            local wrbuildlog_age=$(($now - $(stat -c '%Y' "$wrbuildlog")))
            #If the 00-wrbuild.log was modified recently then build is not hung
            if [ $wrbuildlog_age -lt $fifteen_min ]; then
                nx_status_string="Nx instance $instance is running"
                RETVAL=0
            elif [ $nxlog_age -lt $fifteen_min ]; then
                nx_status_string="Nx instance $instance is running"
                RETVAL=0
            elif [ -d ${nx_builddir}/current_build/build ]; then
                #some packages take long to build and can cause
                #the wrbuild log not to be updated for a long time.
                #This will detect if build progress is actually being made
                local newest_buildlog=$(ls -t1 ${nx_builddir}/current_build/build/*.log | head -n 1)
                local newest_buildlog_age=$(($now - $(stat -c '%Y' "$newest_buildlog")))
                if [ $newest_buildlog_age -lt $fifteen_min ]; then
                    nx_status_string="Nx instance $instance is running"
                    RETVAL=0
                else
                    nx_status_string="Nx is hung"
                    RETVAL=1
                fi
            fi
        elif [ -f "/var/tmp/SFTU" ]; then
            nx_status_string="SFTU deployed. Nx waiting"
            RETVAL=150 # Reserved for application return code
        elif [ ! -f ${nx_builddir}/nx.log ]; then
            nx_status_string="Nx instance $instance is stopped"
            RETVAL=3
        elif [ $(tail -n 1 $nx_log | grep -q "Build blackout") ]; then
            nx_status_string="Build blackout. Nx waiting"
            RETVAL=0
        elif [ $(tail -n 1 $nx_log | grep -q "No new commits") ]; then
            nx_status_string="Waiting for commits."
            RETVAL=0
        elif [ $(tail -n 1 $nx_log | grep -q "Cloning wrlinux-x") ]; then
            nx_status_string="Waiting for initial clone."
            RETVAL=0
        elif [ $(tail -n 5 $nx_log | grep -q "Network glitch") ]; then
            nx_status_string="Something messed up - repo corrupt, network might be down, etc."
            RETVAL=151 # Reserved for application return code
        elif [ $nxlog_age -lt $thirty_min ]; then
            nx_status_string="Nx is waiting"
            RETVAL=0
        else
            nx_status_string="I have no idea what nx is doing: $(tail ${nx_log})"
            RETVAL=4 # Unknown state
        fi
    elif [ -f "$nx_log" ] && [ $(($now - $(stat -c '%Y' "$nx_log"))) -lt $fifteen_min ]; then
        #it is possible that the pidfile is out of date
        nx_status_string="Nx instance $instance is running"
        RETVAL=0
    else
        nx_status_string="Nx instance $instance is stopped"
        RETVAL=3
    fi
    return $RETVAL
}

# See how we were called.
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        nx_status
        echo $nx_status_string
        ;;
    *)
        echo "Usage: nx_instance {start|stop|restart|status}"
        RETVAL=2
        ;;
esac
exit $RETVAL
