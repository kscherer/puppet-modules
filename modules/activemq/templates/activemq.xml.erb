<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
  http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">

<% if webconsole_real -%>
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <value>file:${activemq.base}/conf/credentials.properties</value>
    </property>
  </bean>

<% end -%>
  <broker xmlns="http://activemq.apache.org/schema/core" brokerName="<%= broker_name -%>" useJmx="true" schedulePeriodForDestinationPurge="60000">
    <destinationPolicy>
      <policyMap>
        <policyEntries>
          <policyEntry queue="*.reply.>" gcInactiveDestinations="true" inactiveTimoutBeforeGC="300000" />
          <policyEntry topic=">" producerFlowControl="false"/>
        </policyEntries>
      </policyMap>
    </destinationPolicy>

    <managementContext>
      <managementContext createConnector="false"/>
    </managementContext>

    <!--
        Configure message persistence for the broker. MCollective only
        requires this in a network of brokers, where it's used to prevent
        duplicate messages.

        The default persistence mechanism is the KahaDB store (identified by
        the kahaDB tag). For more information, see:

        http://activemq.apache.org/persistence.html
    -->
    <persistenceAdapter>
      <kahaDB directory="${activemq.base}/data/kahadb"/>
    </persistenceAdapter>

    <plugins>
      <statisticsBrokerPlugin/>
      <simpleAuthenticationPlugin>
        <users>
          <authenticationUser username="amq" password="secret" groups="admins,everyone"/>
          <authenticationUser username="mcollective" password="marionette" groups="mcollective,everyone"/>
          <authenticationUser username="admin" password="secret" groups="mcollective,admin,everyone"/>
        </users>
      </simpleAuthenticationPlugin>
      <authorizationPlugin>
        <map>
          <authorizationMap>
            <authorizationEntries>
              <authorizationEntry queue=">" write="admins" read="admins" admin="admins" />
              <authorizationEntry topic=">" write="admins" read="admins" admin="admins" />
              <authorizationEntry topic="mcollective.>" write="mcollective" read="mcollective" admin="mcollective" />
              <authorizationEntry queue="mcollective.>" write="mcollective" read="mcollective" admin="mcollective" />
              <authorizationEntry topic="yow.>" write="mcollective" read="mcollective" admin="mcollective" />
              <authorizationEntry queue="yow.>" write="mcollective" read="mcollective" admin="mcollective" />
              <authorizationEntry topic="ala.>" write="mcollective" read="mcollective" admin="mcollective" />
              <authorizationEntry queue="ala.>" write="mcollective" read="mcollective" admin="mcollective" />
              <authorizationEntry topic="pek.>" write="mcollective" read="mcollective" admin="mcollective" />
              <authorizationEntry queue="pek.>" write="mcollective" read="mcollective" admin="mcollective" />
              <authorizationEntry topic="ActiveMQ.Advisory.>" read="everyone" write="everyone" admin="everyone"/>
            </authorizationEntries>
          </authorizationMap>
        </map>
      </authorizationPlugin>
    </plugins>

    <systemUsage>
      <systemUsage>
        <memoryUsage>
          <memoryUsage limit="20 mb"/>
        </memoryUsage>
        <storeUsage>
          <storeUsage limit="1 gb" name="foo"/>
        </storeUsage>
        <tempUsage>
          <tempUsage limit="100 mb"/>
        </tempUsage>
      </systemUsage>
    </systemUsage>

    <transportConnectors>
      <transportConnector name="openwire" uri="tcp://0.0.0.0:6166"/>
      <transportConnector name="stomp+nio" uri="stomp://0.0.0.0:6163"/>
    </transportConnectors>
  </broker>

<% if webconsole_real -%>
  <import resource="jetty.xml"/>
<% end -%>
</beans>
